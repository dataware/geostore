#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeoStoreServiceWebRole.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GeoStoreDB")]
	public partial class GeoStoreModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCellLocation(CellLocation instance);
    partial void UpdateCellLocation(CellLocation instance);
    partial void DeleteCellLocation(CellLocation instance);
    partial void InsertWifi(Wifi instance);
    partial void UpdateWifi(Wifi instance);
    partial void DeleteWifi(Wifi instance);
    partial void InsertDataConnection(DataConnection instance);
    partial void UpdateDataConnection(DataConnection instance);
    partial void DeleteDataConnection(DataConnection instance);
    partial void InsertEntry(Entry instance);
    partial void UpdateEntry(Entry instance);
    partial void DeleteEntry(Entry instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertNeighboringCell(NeighboringCell instance);
    partial void UpdateNeighboringCell(NeighboringCell instance);
    partial void DeleteNeighboringCell(NeighboringCell instance);
    partial void InsertServiceState(ServiceState instance);
    partial void UpdateServiceState(ServiceState instance);
    partial void DeleteServiceState(ServiceState instance);
    partial void InsertSignalStrength(SignalStrength instance);
    partial void UpdateSignalStrength(SignalStrength instance);
    partial void DeleteSignalStrength(SignalStrength instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public GeoStoreModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GeoStoreDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GeoStoreModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeoStoreModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeoStoreModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GeoStoreModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CellLocation> CellLocations
		{
			get
			{
				return this.GetTable<CellLocation>();
			}
		}
		
		public System.Data.Linq.Table<Wifi> Wifis
		{
			get
			{
				return this.GetTable<Wifi>();
			}
		}
		
		public System.Data.Linq.Table<DataConnection> DataConnections
		{
			get
			{
				return this.GetTable<DataConnection>();
			}
		}
		
		public System.Data.Linq.Table<Entry> Entries
		{
			get
			{
				return this.GetTable<Entry>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<NeighboringCell> NeighboringCells
		{
			get
			{
				return this.GetTable<NeighboringCell>();
			}
		}
		
		public System.Data.Linq.Table<ServiceState> ServiceStates
		{
			get
			{
				return this.GetTable<ServiceState>();
			}
		}
		
		public System.Data.Linq.Table<SignalStrength> SignalStrengths
		{
			get
			{
				return this.GetTable<SignalStrength>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		private void InsertLocation(Location obj)
		{
			this.InsertLocation(((System.Nullable<double>)(obj.accuracy)), ((System.Nullable<double>)(obj.altitude)), ((System.Nullable<double>)(obj.bearing)), ((System.Nullable<double>)(obj.latitude)), ((System.Nullable<double>)(obj.longitude)), obj.provider, ((System.Nullable<double>)(obj.speed)), obj.extras, ((System.Nullable<System.DateTime>)(obj.measurementTime)), ((System.Nullable<long>)(obj.entryID)), obj.processingMethod, obj.deviceType, obj.deviceId, obj.sensorType, obj.sensorModel, ((System.Nullable<bool>)(obj.IntersensorAgreement)), ((System.Nullable<double>)(obj.solutionConfidence)));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertLocation")]
		public int InsertLocation(
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> accuracy, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> altitude, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> bearing, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> latitude, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> longitude, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string provider, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> speed, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string extras, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime2")] System.Nullable<System.DateTime> measurementTime, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="BigInt")] System.Nullable<long> entryID, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string processingMethod, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string deviceType, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string deviceId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string sensorType, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string sensorModel, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="IntersensorAgreement", DbType="Bit")] System.Nullable<bool> intersensorAgreement, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> solutionConfidence)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accuracy, altitude, bearing, latitude, longitude, provider, speed, extras, measurementTime, entryID, processingMethod, deviceType, deviceId, sensorType, sensorModel, intersensorAgreement, solutionConfidence);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.cellLocation")]
	public partial class CellLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _type;
		
		private System.Nullable<int> _cid;
		
		private System.Nullable<int> _lac;
		
		private System.Nullable<int> _baseStationId;
		
		private System.Nullable<int> _baseStationLatitude;
		
		private System.Nullable<int> _baseStationLongitude;
		
		private System.Nullable<int> _networkId;
		
		private System.Nullable<int> _systemId;
		
		private long _id;
		
		private long _entryId;
		
		private EntitySet<NeighboringCell> _NeighboringCells;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OncidChanging(System.Nullable<int> value);
    partial void OncidChanged();
    partial void OnlacChanging(System.Nullable<int> value);
    partial void OnlacChanged();
    partial void OnbaseStationIdChanging(System.Nullable<int> value);
    partial void OnbaseStationIdChanged();
    partial void OnbaseStationLatitudeChanging(System.Nullable<int> value);
    partial void OnbaseStationLatitudeChanged();
    partial void OnbaseStationLongitudeChanging(System.Nullable<int> value);
    partial void OnbaseStationLongitudeChanged();
    partial void OnnetworkIdChanging(System.Nullable<int> value);
    partial void OnnetworkIdChanged();
    partial void OnsystemIdChanging(System.Nullable<int> value);
    partial void OnsystemIdChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnentryIdChanging(long value);
    partial void OnentryIdChanged();
    #endregion
		
		public CellLocation()
		{
			this._NeighboringCells = new EntitySet<NeighboringCell>(new Action<NeighboringCell>(this.attach_NeighboringCells), new Action<NeighboringCell>(this.detach_NeighboringCells));
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(255)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cid", DbType="Int")]
		public System.Nullable<int> cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lac", DbType="Int")]
		public System.Nullable<int> lac
		{
			get
			{
				return this._lac;
			}
			set
			{
				if ((this._lac != value))
				{
					this.OnlacChanging(value);
					this.SendPropertyChanging();
					this._lac = value;
					this.SendPropertyChanged("lac");
					this.OnlacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseStationId", DbType="Int")]
		public System.Nullable<int> baseStationId
		{
			get
			{
				return this._baseStationId;
			}
			set
			{
				if ((this._baseStationId != value))
				{
					this.OnbaseStationIdChanging(value);
					this.SendPropertyChanging();
					this._baseStationId = value;
					this.SendPropertyChanged("baseStationId");
					this.OnbaseStationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseStationLatitude", DbType="Int")]
		public System.Nullable<int> baseStationLatitude
		{
			get
			{
				return this._baseStationLatitude;
			}
			set
			{
				if ((this._baseStationLatitude != value))
				{
					this.OnbaseStationLatitudeChanging(value);
					this.SendPropertyChanging();
					this._baseStationLatitude = value;
					this.SendPropertyChanged("baseStationLatitude");
					this.OnbaseStationLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_baseStationLongitude", DbType="Int")]
		public System.Nullable<int> baseStationLongitude
		{
			get
			{
				return this._baseStationLongitude;
			}
			set
			{
				if ((this._baseStationLongitude != value))
				{
					this.OnbaseStationLongitudeChanging(value);
					this.SendPropertyChanging();
					this._baseStationLongitude = value;
					this.SendPropertyChanged("baseStationLongitude");
					this.OnbaseStationLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_networkId", DbType="Int")]
		public System.Nullable<int> networkId
		{
			get
			{
				return this._networkId;
			}
			set
			{
				if ((this._networkId != value))
				{
					this.OnnetworkIdChanging(value);
					this.SendPropertyChanging();
					this._networkId = value;
					this.SendPropertyChanged("networkId");
					this.OnnetworkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemId", DbType="Int")]
		public System.Nullable<int> systemId
		{
			get
			{
				return this._systemId;
			}
			set
			{
				if ((this._systemId != value))
				{
					this.OnsystemIdChanging(value);
					this.SendPropertyChanging();
					this._systemId = value;
					this.SendPropertyChanged("systemId");
					this.OnsystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryId", DbType="BigInt NOT NULL")]
		public long entryId
		{
			get
			{
				return this._entryId;
			}
			set
			{
				if ((this._entryId != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIdChanging(value);
					this.SendPropertyChanging();
					this._entryId = value;
					this.SendPropertyChanged("entryId");
					this.OnentryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cellLocation_neighboringCell", Storage="_NeighboringCells", ThisKey="id", OtherKey="cellLocationId")]
		public EntitySet<NeighboringCell> NeighboringCells
		{
			get
			{
				return this._NeighboringCells;
			}
			set
			{
				this._NeighboringCells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_cellLocation", Storage="_Entry", ThisKey="entryId", OtherKey="id", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.CellLocations.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.CellLocations.Add(this);
						this._entryId = value.id;
					}
					else
					{
						this._entryId = default(long);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NeighboringCells(NeighboringCell entity)
		{
			this.SendPropertyChanging();
			entity.CellLocation = this;
		}
		
		private void detach_NeighboringCells(NeighboringCell entity)
		{
			this.SendPropertyChanging();
			entity.CellLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.wifi")]
	public partial class Wifi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ssid;
		
		private string _capabilities;
		
		private System.Nullable<int> _frequency;
		
		private System.Nullable<int> _level;
		
		private string _bssid;
		
		private long _id;
		
		private long _entryID;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnssidChanging(string value);
    partial void OnssidChanged();
    partial void OncapabilitiesChanging(string value);
    partial void OncapabilitiesChanged();
    partial void OnfrequencyChanging(System.Nullable<int> value);
    partial void OnfrequencyChanged();
    partial void OnlevelChanging(System.Nullable<int> value);
    partial void OnlevelChanged();
    partial void OnbssidChanging(string value);
    partial void OnbssidChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnentryIDChanging(long value);
    partial void OnentryIDChanged();
    #endregion
		
		public Wifi()
		{
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssid", DbType="VarChar(32)")]
		public string ssid
		{
			get
			{
				return this._ssid;
			}
			set
			{
				if ((this._ssid != value))
				{
					this.OnssidChanging(value);
					this.SendPropertyChanging();
					this._ssid = value;
					this.SendPropertyChanged("ssid");
					this.OnssidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capabilities", DbType="VarChar(255)")]
		public string capabilities
		{
			get
			{
				return this._capabilities;
			}
			set
			{
				if ((this._capabilities != value))
				{
					this.OncapabilitiesChanging(value);
					this.SendPropertyChanging();
					this._capabilities = value;
					this.SendPropertyChanged("capabilities");
					this.OncapabilitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_frequency", DbType="Int")]
		public System.Nullable<int> frequency
		{
			get
			{
				return this._frequency;
			}
			set
			{
				if ((this._frequency != value))
				{
					this.OnfrequencyChanging(value);
					this.SendPropertyChanging();
					this._frequency = value;
					this.SendPropertyChanged("frequency");
					this.OnfrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int")]
		public System.Nullable<int> level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bssid", DbType="VarChar(255)")]
		public string bssid
		{
			get
			{
				return this._bssid;
			}
			set
			{
				if ((this._bssid != value))
				{
					this.OnbssidChanging(value);
					this.SendPropertyChanging();
					this._bssid = value;
					this.SendPropertyChanged("bssid");
					this.OnbssidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryID", DbType="BigInt NOT NULL")]
		public long entryID
		{
			get
			{
				return this._entryID;
			}
			set
			{
				if ((this._entryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIDChanging(value);
					this.SendPropertyChanging();
					this._entryID = value;
					this.SendPropertyChanged("entryID");
					this.OnentryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_wifi", Storage="_Entry", ThisKey="entryID", OtherKey="id", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.Wifis.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.Wifis.Add(this);
						this._entryID = value.id;
					}
					else
					{
						this._entryID = default(long);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dataConnection")]
	public partial class DataConnection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _state;
		
		private string _networkType;
		
		private int _id;
		
		private long _entryId;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnnetworkTypeChanging(string value);
    partial void OnnetworkTypeChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnentryIdChanging(long value);
    partial void OnentryIdChanged();
    #endregion
		
		public DataConnection()
		{
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(255)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_networkType", DbType="VarChar(255)")]
		public string networkType
		{
			get
			{
				return this._networkType;
			}
			set
			{
				if ((this._networkType != value))
				{
					this.OnnetworkTypeChanging(value);
					this.SendPropertyChanging();
					this._networkType = value;
					this.SendPropertyChanged("networkType");
					this.OnnetworkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryId", DbType="BigInt NOT NULL")]
		public long entryId
		{
			get
			{
				return this._entryId;
			}
			set
			{
				if ((this._entryId != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIdChanging(value);
					this.SendPropertyChanging();
					this._entryId = value;
					this.SendPropertyChanged("entryId");
					this.OnentryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_dataConnection", Storage="_Entry", ThisKey="entryId", OtherKey="id", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.DataConnections.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.DataConnections.Add(this);
						this._entryId = value.id;
					}
					else
					{
						this._entryId = default(long);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.entry")]
	public partial class Entry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _deviceId;
		
		private long _externalTimestamp;
		
		private int _userId;
		
		private EntitySet<CellLocation> _CellLocations;
		
		private EntitySet<Wifi> _Wifis;
		
		private EntitySet<DataConnection> _DataConnections;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<ServiceState> _ServiceStates;
		
		private EntitySet<SignalStrength> _SignalStrengths;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OndeviceIdChanging(string value);
    partial void OndeviceIdChanged();
    partial void OnexternalTimestampChanging(long value);
    partial void OnexternalTimestampChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    #endregion
		
		public Entry()
		{
			this._CellLocations = new EntitySet<CellLocation>(new Action<CellLocation>(this.attach_CellLocations), new Action<CellLocation>(this.detach_CellLocations));
			this._Wifis = new EntitySet<Wifi>(new Action<Wifi>(this.attach_Wifis), new Action<Wifi>(this.detach_Wifis));
			this._DataConnections = new EntitySet<DataConnection>(new Action<DataConnection>(this.attach_DataConnections), new Action<DataConnection>(this.detach_DataConnections));
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._ServiceStates = new EntitySet<ServiceState>(new Action<ServiceState>(this.attach_ServiceStates), new Action<ServiceState>(this.detach_ServiceStates));
			this._SignalStrengths = new EntitySet<SignalStrength>(new Action<SignalStrength>(this.attach_SignalStrengths), new Action<SignalStrength>(this.detach_SignalStrengths));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deviceId", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string deviceId
		{
			get
			{
				return this._deviceId;
			}
			set
			{
				if ((this._deviceId != value))
				{
					this.OndeviceIdChanging(value);
					this.SendPropertyChanging();
					this._deviceId = value;
					this.SendPropertyChanged("deviceId");
					this.OndeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_externalTimestamp", DbType="BigInt NOT NULL")]
		public long externalTimestamp
		{
			get
			{
				return this._externalTimestamp;
			}
			set
			{
				if ((this._externalTimestamp != value))
				{
					this.OnexternalTimestampChanging(value);
					this.SendPropertyChanging();
					this._externalTimestamp = value;
					this.SendPropertyChanged("externalTimestamp");
					this.OnexternalTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_cellLocation", Storage="_CellLocations", ThisKey="id", OtherKey="entryId")]
		public EntitySet<CellLocation> CellLocations
		{
			get
			{
				return this._CellLocations;
			}
			set
			{
				this._CellLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_wifi", Storage="_Wifis", ThisKey="id", OtherKey="entryID")]
		public EntitySet<Wifi> Wifis
		{
			get
			{
				return this._Wifis;
			}
			set
			{
				this._Wifis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_dataConnection", Storage="_DataConnections", ThisKey="id", OtherKey="entryId")]
		public EntitySet<DataConnection> DataConnections
		{
			get
			{
				return this._DataConnections;
			}
			set
			{
				this._DataConnections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_location", Storage="_Locations", ThisKey="id", OtherKey="entryID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_serviceState", Storage="_ServiceStates", ThisKey="id", OtherKey="entryID")]
		public EntitySet<ServiceState> ServiceStates
		{
			get
			{
				return this._ServiceStates;
			}
			set
			{
				this._ServiceStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_signalStrength", Storage="_SignalStrengths", ThisKey="id", OtherKey="entryId")]
		public EntitySet<SignalStrength> SignalStrengths
		{
			get
			{
				return this._SignalStrengths;
			}
			set
			{
				this._SignalStrengths.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CellLocations(CellLocation entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_CellLocations(CellLocation entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_Wifis(Wifi entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_Wifis(Wifi entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_DataConnections(DataConnection entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_DataConnections(DataConnection entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_ServiceStates(ServiceState entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_ServiceStates(ServiceState entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
		
		private void attach_SignalStrengths(SignalStrength entity)
		{
			this.SendPropertyChanging();
			entity.Entry = this;
		}
		
		private void detach_SignalStrengths(SignalStrength entity)
		{
			this.SendPropertyChanging();
			entity.Entry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<double> _accuracy;
		
		private System.Nullable<double> _altitude;
		
		private System.Nullable<double> _bearing;
		
		private double _latitude;
		
		private double _longitude;
		
		private string _provider;
		
		private System.Nullable<double> _speed;
		
		private string _extras;
		
		private System.DateTime _measurementTime;
		
		private long _id;
		
		private long _entryID;
		
		private string _processingMethod;
		
		private string _deviceType;
		
		private string _deviceId;
		
		private string _sensorType;
		
		private string _sensorModel;
		
		private System.Nullable<bool> _IntersensorAgreement;
		
		private System.Nullable<double> _solutionConfidence;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaccuracyChanging(System.Nullable<double> value);
    partial void OnaccuracyChanged();
    partial void OnaltitudeChanging(System.Nullable<double> value);
    partial void OnaltitudeChanged();
    partial void OnbearingChanging(System.Nullable<double> value);
    partial void OnbearingChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(double value);
    partial void OnlongitudeChanged();
    partial void OnproviderChanging(string value);
    partial void OnproviderChanged();
    partial void OnspeedChanging(System.Nullable<double> value);
    partial void OnspeedChanged();
    partial void OnextrasChanging(string value);
    partial void OnextrasChanged();
    partial void OnmeasurementTimeChanging(System.DateTime value);
    partial void OnmeasurementTimeChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnentryIDChanging(long value);
    partial void OnentryIDChanged();
    partial void OnprocessingMethodChanging(string value);
    partial void OnprocessingMethodChanged();
    partial void OndeviceTypeChanging(string value);
    partial void OndeviceTypeChanged();
    partial void OndeviceIdChanging(string value);
    partial void OndeviceIdChanged();
    partial void OnsensorTypeChanging(string value);
    partial void OnsensorTypeChanged();
    partial void OnsensorModelChanging(string value);
    partial void OnsensorModelChanged();
    partial void OnIntersensorAgreementChanging(System.Nullable<bool> value);
    partial void OnIntersensorAgreementChanged();
    partial void OnsolutionConfidenceChanging(System.Nullable<double> value);
    partial void OnsolutionConfidenceChanged();
    #endregion
		
		public Location()
		{
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accuracy", DbType="Float")]
		public System.Nullable<double> accuracy
		{
			get
			{
				return this._accuracy;
			}
			set
			{
				if ((this._accuracy != value))
				{
					this.OnaccuracyChanging(value);
					this.SendPropertyChanging();
					this._accuracy = value;
					this.SendPropertyChanged("accuracy");
					this.OnaccuracyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_altitude", DbType="Float")]
		public System.Nullable<double> altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				if ((this._altitude != value))
				{
					this.OnaltitudeChanging(value);
					this.SendPropertyChanging();
					this._altitude = value;
					this.SendPropertyChanged("altitude");
					this.OnaltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bearing", DbType="Float")]
		public System.Nullable<double> bearing
		{
			get
			{
				return this._bearing;
			}
			set
			{
				if ((this._bearing != value))
				{
					this.OnbearingChanging(value);
					this.SendPropertyChanging();
					this._bearing = value;
					this.SendPropertyChanged("bearing");
					this.OnbearingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float NOT NULL")]
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_provider", DbType="VarChar(255)")]
		public string provider
		{
			get
			{
				return this._provider;
			}
			set
			{
				if ((this._provider != value))
				{
					this.OnproviderChanging(value);
					this.SendPropertyChanging();
					this._provider = value;
					this.SendPropertyChanged("provider");
					this.OnproviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speed", DbType="Float")]
		public System.Nullable<double> speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				if ((this._speed != value))
				{
					this.OnspeedChanging(value);
					this.SendPropertyChanging();
					this._speed = value;
					this.SendPropertyChanged("speed");
					this.OnspeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extras", DbType="VarChar(255)")]
		public string extras
		{
			get
			{
				return this._extras;
			}
			set
			{
				if ((this._extras != value))
				{
					this.OnextrasChanging(value);
					this.SendPropertyChanging();
					this._extras = value;
					this.SendPropertyChanged("extras");
					this.OnextrasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_measurementTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime measurementTime
		{
			get
			{
				return this._measurementTime;
			}
			set
			{
				if ((this._measurementTime != value))
				{
					this.OnmeasurementTimeChanging(value);
					this.SendPropertyChanging();
					this._measurementTime = value;
					this.SendPropertyChanged("measurementTime");
					this.OnmeasurementTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryID", DbType="BigInt NOT NULL")]
		public long entryID
		{
			get
			{
				return this._entryID;
			}
			set
			{
				if ((this._entryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIDChanging(value);
					this.SendPropertyChanging();
					this._entryID = value;
					this.SendPropertyChanged("entryID");
					this.OnentryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_processingMethod", DbType="VarChar(50)")]
		public string processingMethod
		{
			get
			{
				return this._processingMethod;
			}
			set
			{
				if ((this._processingMethod != value))
				{
					this.OnprocessingMethodChanging(value);
					this.SendPropertyChanging();
					this._processingMethod = value;
					this.SendPropertyChanged("processingMethod");
					this.OnprocessingMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deviceType", DbType="VarChar(50)")]
		public string deviceType
		{
			get
			{
				return this._deviceType;
			}
			set
			{
				if ((this._deviceType != value))
				{
					this.OndeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._deviceType = value;
					this.SendPropertyChanged("deviceType");
					this.OndeviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deviceId", DbType="VarChar(50)")]
		public string deviceId
		{
			get
			{
				return this._deviceId;
			}
			set
			{
				if ((this._deviceId != value))
				{
					this.OndeviceIdChanging(value);
					this.SendPropertyChanging();
					this._deviceId = value;
					this.SendPropertyChanged("deviceId");
					this.OndeviceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sensorType", DbType="VarChar(50)")]
		public string sensorType
		{
			get
			{
				return this._sensorType;
			}
			set
			{
				if ((this._sensorType != value))
				{
					this.OnsensorTypeChanging(value);
					this.SendPropertyChanging();
					this._sensorType = value;
					this.SendPropertyChanged("sensorType");
					this.OnsensorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sensorModel", DbType="VarChar(50)")]
		public string sensorModel
		{
			get
			{
				return this._sensorModel;
			}
			set
			{
				if ((this._sensorModel != value))
				{
					this.OnsensorModelChanging(value);
					this.SendPropertyChanging();
					this._sensorModel = value;
					this.SendPropertyChanged("sensorModel");
					this.OnsensorModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntersensorAgreement", DbType="Bit")]
		public System.Nullable<bool> IntersensorAgreement
		{
			get
			{
				return this._IntersensorAgreement;
			}
			set
			{
				if ((this._IntersensorAgreement != value))
				{
					this.OnIntersensorAgreementChanging(value);
					this.SendPropertyChanging();
					this._IntersensorAgreement = value;
					this.SendPropertyChanged("IntersensorAgreement");
					this.OnIntersensorAgreementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_solutionConfidence", DbType="Float")]
		public System.Nullable<double> solutionConfidence
		{
			get
			{
				return this._solutionConfidence;
			}
			set
			{
				if ((this._solutionConfidence != value))
				{
					this.OnsolutionConfidenceChanging(value);
					this.SendPropertyChanging();
					this._solutionConfidence = value;
					this.SendPropertyChanged("solutionConfidence");
					this.OnsolutionConfidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_location", Storage="_Entry", ThisKey="entryID", OtherKey="id", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._entryID = value.id;
					}
					else
					{
						this._entryID = default(long);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.neighboringCell")]
	public partial class NeighboringCell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _cid;
		
		private System.Nullable<int> _lac;
		
		private System.Nullable<int> _psc;
		
		private System.Nullable<int> _rssi;
		
		private string _networkType;
		
		private long _id;
		
		private long _cellLocationId;
		
		private long _entryId;
		
		private EntityRef<CellLocation> _CellLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncidChanging(System.Nullable<int> value);
    partial void OncidChanged();
    partial void OnlacChanging(System.Nullable<int> value);
    partial void OnlacChanged();
    partial void OnpscChanging(System.Nullable<int> value);
    partial void OnpscChanged();
    partial void OnrssiChanging(System.Nullable<int> value);
    partial void OnrssiChanged();
    partial void OnnetworkTypeChanging(string value);
    partial void OnnetworkTypeChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OncellLocationIdChanging(long value);
    partial void OncellLocationIdChanged();
    partial void OnentryIdChanging(long value);
    partial void OnentryIdChanged();
    #endregion
		
		public NeighboringCell()
		{
			this._CellLocation = default(EntityRef<CellLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cid", DbType="Int")]
		public System.Nullable<int> cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lac", DbType="Int")]
		public System.Nullable<int> lac
		{
			get
			{
				return this._lac;
			}
			set
			{
				if ((this._lac != value))
				{
					this.OnlacChanging(value);
					this.SendPropertyChanging();
					this._lac = value;
					this.SendPropertyChanged("lac");
					this.OnlacChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_psc", DbType="Int")]
		public System.Nullable<int> psc
		{
			get
			{
				return this._psc;
			}
			set
			{
				if ((this._psc != value))
				{
					this.OnpscChanging(value);
					this.SendPropertyChanging();
					this._psc = value;
					this.SendPropertyChanged("psc");
					this.OnpscChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rssi", DbType="Int")]
		public System.Nullable<int> rssi
		{
			get
			{
				return this._rssi;
			}
			set
			{
				if ((this._rssi != value))
				{
					this.OnrssiChanging(value);
					this.SendPropertyChanging();
					this._rssi = value;
					this.SendPropertyChanged("rssi");
					this.OnrssiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_networkType", DbType="VarChar(255)")]
		public string networkType
		{
			get
			{
				return this._networkType;
			}
			set
			{
				if ((this._networkType != value))
				{
					this.OnnetworkTypeChanging(value);
					this.SendPropertyChanging();
					this._networkType = value;
					this.SendPropertyChanged("networkType");
					this.OnnetworkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cellLocationId", DbType="BigInt NOT NULL")]
		public long cellLocationId
		{
			get
			{
				return this._cellLocationId;
			}
			set
			{
				if ((this._cellLocationId != value))
				{
					if (this._CellLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncellLocationIdChanging(value);
					this.SendPropertyChanging();
					this._cellLocationId = value;
					this.SendPropertyChanged("cellLocationId");
					this.OncellLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryId", DbType="BigInt NOT NULL")]
		public long entryId
		{
			get
			{
				return this._entryId;
			}
			set
			{
				if ((this._entryId != value))
				{
					this.OnentryIdChanging(value);
					this.SendPropertyChanging();
					this._entryId = value;
					this.SendPropertyChanged("entryId");
					this.OnentryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="cellLocation_neighboringCell", Storage="_CellLocation", ThisKey="cellLocationId", OtherKey="id", IsForeignKey=true)]
		public CellLocation CellLocation
		{
			get
			{
				return this._CellLocation.Entity;
			}
			set
			{
				CellLocation previousValue = this._CellLocation.Entity;
				if (((previousValue != value) 
							|| (this._CellLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CellLocation.Entity = null;
						previousValue.NeighboringCells.Remove(this);
					}
					this._CellLocation.Entity = value;
					if ((value != null))
					{
						value.NeighboringCells.Add(this);
						this._cellLocationId = value.id;
					}
					else
					{
						this._cellLocationId = default(long);
					}
					this.SendPropertyChanged("CellLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.serviceState")]
	public partial class ServiceState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<bool> _isManualSelection;
		
		private string _operatorAlphaLong;
		
		private string _operatorAlphaShort;
		
		private string _operatorNumeric;
		
		private System.Nullable<bool> _roaming;
		
		private string _state;
		
		private long _id;
		
		private long _entryID;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnisManualSelectionChanging(System.Nullable<bool> value);
    partial void OnisManualSelectionChanged();
    partial void OnoperatorAlphaLongChanging(string value);
    partial void OnoperatorAlphaLongChanged();
    partial void OnoperatorAlphaShortChanging(string value);
    partial void OnoperatorAlphaShortChanged();
    partial void OnoperatorNumericChanging(string value);
    partial void OnoperatorNumericChanged();
    partial void OnroamingChanging(System.Nullable<bool> value);
    partial void OnroamingChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnentryIDChanging(long value);
    partial void OnentryIDChanged();
    #endregion
		
		public ServiceState()
		{
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isManualSelection", DbType="Bit")]
		public System.Nullable<bool> isManualSelection
		{
			get
			{
				return this._isManualSelection;
			}
			set
			{
				if ((this._isManualSelection != value))
				{
					this.OnisManualSelectionChanging(value);
					this.SendPropertyChanging();
					this._isManualSelection = value;
					this.SendPropertyChanged("isManualSelection");
					this.OnisManualSelectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatorAlphaLong", DbType="NChar(16)")]
		public string operatorAlphaLong
		{
			get
			{
				return this._operatorAlphaLong;
			}
			set
			{
				if ((this._operatorAlphaLong != value))
				{
					this.OnoperatorAlphaLongChanging(value);
					this.SendPropertyChanging();
					this._operatorAlphaLong = value;
					this.SendPropertyChanged("operatorAlphaLong");
					this.OnoperatorAlphaLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatorAlphaShort", DbType="NChar(8)")]
		public string operatorAlphaShort
		{
			get
			{
				return this._operatorAlphaShort;
			}
			set
			{
				if ((this._operatorAlphaShort != value))
				{
					this.OnoperatorAlphaShortChanging(value);
					this.SendPropertyChanging();
					this._operatorAlphaShort = value;
					this.SendPropertyChanged("operatorAlphaShort");
					this.OnoperatorAlphaShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_operatorNumeric", DbType="NChar(6)")]
		public string operatorNumeric
		{
			get
			{
				return this._operatorNumeric;
			}
			set
			{
				if ((this._operatorNumeric != value))
				{
					this.OnoperatorNumericChanging(value);
					this.SendPropertyChanging();
					this._operatorNumeric = value;
					this.SendPropertyChanged("operatorNumeric");
					this.OnoperatorNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roaming", DbType="Bit")]
		public System.Nullable<bool> roaming
		{
			get
			{
				return this._roaming;
			}
			set
			{
				if ((this._roaming != value))
				{
					this.OnroamingChanging(value);
					this.SendPropertyChanging();
					this._roaming = value;
					this.SendPropertyChanged("roaming");
					this.OnroamingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="VarChar(255)")]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryID", DbType="BigInt NOT NULL")]
		public long entryID
		{
			get
			{
				return this._entryID;
			}
			set
			{
				if ((this._entryID != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIDChanging(value);
					this.SendPropertyChanging();
					this._entryID = value;
					this.SendPropertyChanged("entryID");
					this.OnentryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_serviceState", Storage="_Entry", ThisKey="entryID", OtherKey="id", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.ServiceStates.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.ServiceStates.Add(this);
						this._entryID = value.id;
					}
					else
					{
						this._entryID = default(long);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.signalStrength")]
	public partial class SignalStrength : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _cdmaDbm;
		
		private System.Nullable<int> _cdmaEcio;
		
		private System.Nullable<int> _evdoDbm;
		
		private System.Nullable<int> _evdoEcio;
		
		private System.Nullable<int> _evdoSnr;
		
		private System.Nullable<int> _gsmBitErrorRate;
		
		private System.Nullable<int> _gsmSingalStrength;
		
		private System.Nullable<bool> _isGsm;
		
		private long _id;
		
		private long _entryId;
		
		private EntityRef<Entry> _Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncdmaDbmChanging(System.Nullable<int> value);
    partial void OncdmaDbmChanged();
    partial void OncdmaEcioChanging(System.Nullable<int> value);
    partial void OncdmaEcioChanged();
    partial void OnevdoDbmChanging(System.Nullable<int> value);
    partial void OnevdoDbmChanged();
    partial void OnevdoEcioChanging(System.Nullable<int> value);
    partial void OnevdoEcioChanged();
    partial void OnevdoSnrChanging(System.Nullable<int> value);
    partial void OnevdoSnrChanged();
    partial void OngsmBitErrorRateChanging(System.Nullable<int> value);
    partial void OngsmBitErrorRateChanged();
    partial void OngsmSingalStrengthChanging(System.Nullable<int> value);
    partial void OngsmSingalStrengthChanged();
    partial void OnisGsmChanging(System.Nullable<bool> value);
    partial void OnisGsmChanged();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnentryIdChanging(long value);
    partial void OnentryIdChanged();
    #endregion
		
		public SignalStrength()
		{
			this._Entry = default(EntityRef<Entry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cdmaDbm", DbType="Int")]
		public System.Nullable<int> cdmaDbm
		{
			get
			{
				return this._cdmaDbm;
			}
			set
			{
				if ((this._cdmaDbm != value))
				{
					this.OncdmaDbmChanging(value);
					this.SendPropertyChanging();
					this._cdmaDbm = value;
					this.SendPropertyChanged("cdmaDbm");
					this.OncdmaDbmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cdmaEcio", DbType="Int")]
		public System.Nullable<int> cdmaEcio
		{
			get
			{
				return this._cdmaEcio;
			}
			set
			{
				if ((this._cdmaEcio != value))
				{
					this.OncdmaEcioChanging(value);
					this.SendPropertyChanging();
					this._cdmaEcio = value;
					this.SendPropertyChanged("cdmaEcio");
					this.OncdmaEcioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evdoDbm", DbType="Int")]
		public System.Nullable<int> evdoDbm
		{
			get
			{
				return this._evdoDbm;
			}
			set
			{
				if ((this._evdoDbm != value))
				{
					this.OnevdoDbmChanging(value);
					this.SendPropertyChanging();
					this._evdoDbm = value;
					this.SendPropertyChanged("evdoDbm");
					this.OnevdoDbmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evdoEcio", DbType="Int")]
		public System.Nullable<int> evdoEcio
		{
			get
			{
				return this._evdoEcio;
			}
			set
			{
				if ((this._evdoEcio != value))
				{
					this.OnevdoEcioChanging(value);
					this.SendPropertyChanging();
					this._evdoEcio = value;
					this.SendPropertyChanged("evdoEcio");
					this.OnevdoEcioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_evdoSnr", DbType="Int")]
		public System.Nullable<int> evdoSnr
		{
			get
			{
				return this._evdoSnr;
			}
			set
			{
				if ((this._evdoSnr != value))
				{
					this.OnevdoSnrChanging(value);
					this.SendPropertyChanging();
					this._evdoSnr = value;
					this.SendPropertyChanged("evdoSnr");
					this.OnevdoSnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gsmBitErrorRate", DbType="Int")]
		public System.Nullable<int> gsmBitErrorRate
		{
			get
			{
				return this._gsmBitErrorRate;
			}
			set
			{
				if ((this._gsmBitErrorRate != value))
				{
					this.OngsmBitErrorRateChanging(value);
					this.SendPropertyChanging();
					this._gsmBitErrorRate = value;
					this.SendPropertyChanged("gsmBitErrorRate");
					this.OngsmBitErrorRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gsmSingalStrength", DbType="Int")]
		public System.Nullable<int> gsmSingalStrength
		{
			get
			{
				return this._gsmSingalStrength;
			}
			set
			{
				if ((this._gsmSingalStrength != value))
				{
					this.OngsmSingalStrengthChanging(value);
					this.SendPropertyChanging();
					this._gsmSingalStrength = value;
					this.SendPropertyChanged("gsmSingalStrength");
					this.OngsmSingalStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isGsm", DbType="Bit")]
		public System.Nullable<bool> isGsm
		{
			get
			{
				return this._isGsm;
			}
			set
			{
				if ((this._isGsm != value))
				{
					this.OnisGsmChanging(value);
					this.SendPropertyChanging();
					this._isGsm = value;
					this.SendPropertyChanged("isGsm");
					this.OnisGsmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryId", DbType="BigInt NOT NULL")]
		public long entryId
		{
			get
			{
				return this._entryId;
			}
			set
			{
				if ((this._entryId != value))
				{
					if (this._Entry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentryIdChanging(value);
					this.SendPropertyChanging();
					this._entryId = value;
					this.SendPropertyChanged("entryId");
					this.OnentryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="entry_signalStrength", Storage="_Entry", ThisKey="entryId", OtherKey="id", IsForeignKey=true)]
		public Entry Entry
		{
			get
			{
				return this._Entry.Entity;
			}
			set
			{
				Entry previousValue = this._Entry.Entity;
				if (((previousValue != value) 
							|| (this._Entry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entry.Entity = null;
						previousValue.SignalStrengths.Remove(this);
					}
					this._Entry.Entity = value;
					if ((value != null))
					{
						value.SignalStrengths.Add(this);
						this._entryId = value.id;
					}
					else
					{
						this._entryId = default(long);
					}
					this.SendPropertyChanged("Entry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _jabber_id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onjabber_idChanging(string value);
    partial void Onjabber_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jabber_id", DbType="VarChar(256)")]
		public string jabber_id
		{
			get
			{
				return this._jabber_id;
			}
			set
			{
				if ((this._jabber_id != value))
				{
					this.Onjabber_idChanging(value);
					this.SendPropertyChanging();
					this._jabber_id = value;
					this.SendPropertyChanged("jabber_id");
					this.Onjabber_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
